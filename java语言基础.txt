## 1. 标识符：字母、数字、下划线(_)、美元符号($)组成，且不能以数字开头。
## 2. 不同标示符定义习惯：
- 包名：使用小写字母。
- 类名和接口名：通常定义为由具体含义的单词组成，所有单词的首字母大写。
- 方法名：通常也是由具有具体含义的单词组成，第一个单词首字母小写，其他单词的首字母都大写（驼峰命名法）。
- 变量名：成员变量和方法相同，局部变量全部使用小写。
- 常量名：全部使用大写，最好使用下划线分隔单词。
## 3. **关键字**
1. 访问修饰符关键字：
- **pubulic**: 所修饰的类、方法和变量是公共的，其他类可以访问该关键字修饰的类、方法或者变量。
- **protected**: 用于修饰方法和变量。这些方法和变量可以被同一个包中的类和子类进行访问。
- **private**: 同样修饰方法和变量只能由所在的类进行访问。
2. 类、方法和变量修饰关键字
- `class`:告诉系统后面的单词是一个类名，从而定义一个类。
- `interface`: 告诉系统后面的单词是一个接口名，从而定义一个接口。
- `implements`: 让类实现接口。
- `extends`: 用于继承。
- `abstract`: 抽象修饰符。
- `static`: 静态修饰符。
- `new`: 实例化对象。
- `native`、`strictfp`、`synchronized`、`transient`和`volatile`等。
3. 流程控制关键字
- `if-else`语句
- `switch-case-default`语句
- `for`语句
- `do-while`语句
- `break`语句
- `continue`语句
- `return`语句
4. 异常处理关键字
- `try-catch-finally`
- `throw`和`throws`
- `assert`断言操作
5. 包控制关键字
- import
- package
6. 数据类型关键字
- 数值型（short（16）、int（32，默认类型）、long（64）、float（32）、double（64，默认类型））
- 布尔型（boolean）
- 字符型（char（16位，可以用Unicode码来表示`\uxxxx`））
- 字节型（byte（8位，取值范围：-2（7）~2（7）-1）
7. 特殊类型和方法关键字
- `super`用于引用父类
- `this`用于应用当前类对象
- `void`用于定义一般方法，该方法无返回值
8. 没有使用的关键字
- `const`和`goto`不属于系统使用的关键字
## 4.数据类型转换
1. 自动类型转换
- **低位数**的数据类型自动转换为**高位数**的数据类型
- char(16)->int(32),int(32)->double(64)
2. 强制类型转换
- 前提条件：转换的数据类型必须兼容
- 语法格式：`(type)value`
3. 隐含强制类型转换
- byte b = 123
- java系统自动完成，而浮点数不存在这种情况，因为float类型定义在数字后必须加上（F/f）。
## 5.移位运算符
1. 左移运算符(<<)
```
int a1 = 5<<1;  // 0101-->1010
System.out.println("a1左移一位：" + a1); // 10
```
- 将第一个操作数的比特位向左移动到第二个操作数指定的位数，右边的空缺的位用0补充
- 左移运算相当于执行*2运算
2. 右移运算符（>>）
```
int a2 = 5>>1;  //0101-->0010
System.out.println("a2右移一位：" + a2); //2
- 如果右移的第一个操作数是正数，则填充0；如果为负数，则填充1.
- 右移运算如果第一个操作数X是奇数的 话，相当于（X-1）/2操作，如果为偶数，相当于X/2.
3. 无符号右移运算符(>>>)
- 无符号右移运算符和右移运算符的规则是一样的，只是在填充时不管原数是正数还是负数，都用0填充，所以对于正数无符号右移是毫无意义的，对于负数，无符号右移可以把原数变成一个很大的正数。
